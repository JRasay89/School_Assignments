package vmmanager;

import vmsimulation.*;

/**
 * An "empty" class that is to be copied into VirtualMemoryManagerV0 (Question #2),
 * which is then copied into VirtualMemoryManagerV1 (Question #3), etc. The Java
 * package you turn in should contain all copies, since each is tested separately
 * using the SystemSimulator class. 
 * 
 * @author Henri Casanova
 *
 */
public class VirtualMemoryManagerV0 {

	MainMemory memory;
	BackingStore disk;
	Integer pageSize;
	BitwiseToolbox btb;
	int bitCounter = 0;

        /**
         * Creates a virtual memory manager that manages a main memory and a disk,
         * using a given page size (in bytes) - To be implemented for all versions.
         * 
         * @param memory The main memory
         * @param disk The disk
         * @param pageSize The page size
         * @throws MemoryException If parameters are invalid
         */
        public VirtualMemoryManagerV0 (MainMemory memory,BackingStore disk, Integer pageSize) throws MemoryException {
                // TO IMPLEMENT: V0, V1, V2, V3, V4
		this.memory = memory;
		this.disk = disk;
		this.pageSize = pageSize;
		int i = memory.size();
		while (i > 1) {
			i = i/2;
			this.bitCounter++;
		}
		
        }

        /**
         * Writes a byte to memory given a 32-bit integer whose low bits are
         * interpreted as a virtual address - To be implemented for all version.
         * 
         * @param fourByteInteger A 32-bit integer
         * @param value The byte Value written to memory at the relevant address
         * @throws MemoryException If there is an invalid access
         */
        public void writeByte(Integer fourByteInteger, byte value) throws MemoryException {
                // TO IMPLEMENT: V0, V1, V2, V3, V4
		System.out.println("RAM write: " + this.btb.getBitString(fourByteInteger, bitCounter - 1) + " <-- " + value);
		memory.writeByte(fourByteInteger, value);
        }

        /**
         * Reads a byte from memory given a 32-bit integer whose low bits are
         * interpreted as a virtual address - To be implemented for all versions.
         * 
         * @param fourByteInteger A 32-bit integer
         * @return The byte value read from memory at the relevant address
         * @throws MemoryException If there is an invalid access
         */
        public Byte readByte(Integer fourByteInteger) throws MemoryException {
                // TO IMPLEMENT: V0, V1, V2, V3, V4
		System.out.println("RAM read: " + this.btb.getBitString(fourByteInteger, bitCounter - 1) + " <-- " + 					    memory.readByte(fourByteInteger));

                return memory.readByte(fourByteInteger);
        }

        /**
         * Prints the content of memory as a sequence of lines 
         * with the format "binaryPhysicalAddress: byteValue" to System.out -
         * To be implemented for all versions.
         * 
         * @throws MemoryException If there is an invalid access
         */
        public void printMemoryContent() throws MemoryException {
                // TO IMPLEMENT: V0, V1, V2, V3, V4
		for (int i = 0; i < this.memory.size(); i++) {
			System.out.println(this.btb.getBitString(i, bitCounter - 1) + ": " + memory.readByte(i));
		}
        }

	/**
         * Prints the content of the disk as a sequence of lines
         * with the format "PAGE pageNumber: byteValue, byteValue, ... byteValue" to
         * System.out, where pageNumber is a virtual page number and
         * the list of byte values corresponds to all bytes
         * in a given page on disk - To be implemented in versions V1 and above. 
         *  
         * @throws MemoryException If there is an invalid access
         */
        public void printDiskContent() throws MemoryException {
                // TO IMPLEMENT: V1, V2, V3, V4
                System.err.println("Not implemented yet");

                return;
        }

        /**
         * Writes all pages currently in memory frames back to disk - 
         * To be implemented in versions V1 and above.
         * 
         * @throws MemoryException If there is an invalid access
         */
        // Method to write back all pages to disk
        public void writeBackAllPagesToDisk() throws MemoryException {
                // TO IMPLEMENT: V1, V2, V3, V4
                System.err.println("Not implemented yet");

        }

        /**
         * Returns the number of page faults that have occurred to date - 
         * To be implemented in versions V1 and above.
         * 
         * @return Number of page faults
         */
        public int getPageFaultCount() {
                // TO IMPLEMENT: V1, V2, V3, V4
                System.err.println("Not implemented yet");

                return 0;
        }

        /**
         * Returns the number of bytes that have been transfered back and forth between the memory
         * and the disk to date -
         * To be implemented in versions V1 and above.
         * 
         * @return Number of bytes transferred
         */
        public int getTransferedByteCount() {
                // TO IMPLEMENT: V1, V2, V3, V4
                System.err.println("Not implemented yet");

                return 0;
        }
	
}
