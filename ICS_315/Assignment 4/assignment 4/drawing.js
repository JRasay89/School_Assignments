// Generated by CoffeeScript 1.7.1
(function() {
  var Canvas, Circle, Color, Curve, Line, Polygon, Rectangle, Shape, Square, roundRectangle,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Color = (function() {
    function Color() {}

    Color.transparent = 'rgba(0,0,0,0)';

    Color.red = 'rgb(255,0,0)';

    Color.green = 'rgb(0,255,0)';

    Color.blue = 'rgb(0,0,255)';

    Color.yellow = 'rgb(255,255,0)';

    Color.black = 'rgb(0,0,0)';

    Color.white = 'rgb(255,255,255)';

    Color.gray = 'rgb(127,127,127)';

    Color.aqua = 'rgb(0,255,255)';

    Color.redish = 'rgba(255,0,0,0.25)';

    Color.greenish = 'rgba(0,255,0,0.25)';

    Color.bluish = 'rgba(0,0,255,0.25)';

    return Color;

  })();

  Canvas = (function() {
    window.Canvas = Canvas;

    function Canvas(id) {
      var canvas, grid;
      grid = (function(_this) {
        return function(n, d, max) {
          var color, gap, length, x, y, _i, _j, _ref, _results;
          _ref = [50, 50, 500], n = _ref[0], gap = _ref[1], length = _ref[2];
          for (x = _i = -n; -n <= n ? _i <= n : _i >= n; x = -n <= n ? ++_i : --_i) {
            color = x === 0 ? Color.redish : Color.greenish;
            new Line(_this, [gap * x, -length], [gap * x, length]).stroke(color).draw();
          }
          _results = [];
          for (y = _j = -n; -n <= n ? _j <= n : _j >= n; y = -n <= n ? ++_j : --_j) {
            color = y === 0 ? Color.redish : Color.bluish;
            _results.push(new Line(_this, [-length, gap * y], [length, gap * y]).stroke(color).draw());
          }
          return _results;
        };
      })(this);
      canvas = $("#" + id).get(0);
      this.unsupported = canvas == null;
      if (this.unsupported) {
        "System error: No <canvas id=\'" + id + "\" /> DOM element.";
      } else {
        this.unsupported = canvas.getContext == null;
        if (this.unsupported) {
          "Sorry, your browser doesn't support drawing. (I.e., HTML5 canvas)";
        } else {
          this.context = canvas.getContext('2d');
          grid();
        }
      }
    }

    Canvas.toRadians = function(angle) {
      if (angle.degrees != null) {
        return Math.PI / 180 * angle.degrees;
      } else {
        return angle.radians;
      }
    };

    return Canvas;

  })();

  Shape = (function() {
    function Shape(canvas) {
      this.canvas = canvas;
      this.context = this.canvas.context;
      this.color = Color.transparent;
      this.strokeColor = Color.black;
      this.lineWidth = 1;
      this.scaleWidthHeight = [1, 1];
      this.translateXY = [1, 1];
    }

    Shape.prototype.fill = function(color) {
      this.color = color;
      return this;
    };

    Shape.prototype.stroke = function(strokeColor) {
      this.strokeColor = strokeColor;
      return this;
    };

    Shape.prototype.strokeWidth = function(lineWidth) {
      this.lineWidth = lineWidth;
      return this;
    };

    Shape.prototype.rotate = function(angle) {
      this.angle = angle;
      return this;
    };

    Shape.prototype.scale = function(scaleWidthHeight) {
      this.scaleWidthHeight = scaleWidthHeight;
      return this;
    };

    Shape.prototype.translate = function(translateXY) {
      this.translateXY = translateXY;
      return this;
    };

    Shape.prototype.drawShape = function(drawSpecfic) {
      if (this.canvas.unsupported) {
        return;
      }
      this.context.save();
      this.context.fillStyle = this.color;
      this.context.strokeStyle = this.strokeColor;
      this.context.lineWidth = this.lineWidth;
      this.context.beginPath();
      this.context.rotate(this.angle * Math.PI / 180);
      this.context.scale(this.scaleWidthHeight[0], this.scaleWidthHeight[1]);
      this.context.translate(this.translateXY[0], this.translateXY[1]);
      drawSpecfic();
      this.context.closePath();
      this.context.fill();
      this.context.stroke();
      this.context.restore();
      return this;
    };

    return Shape;

  })();

  Line = (function(_super) {
    __extends(Line, _super);

    function Line(canvas, from, to) {
      this.from = from;
      this.to = to;
      this.draw = __bind(this.draw, this);
      Line.__super__.constructor.call(this, canvas);
    }

    Line.prototype.draw = function() {
      return this.drawShape((function(_this) {
        return function() {
          _this.context.moveTo(_this.from[0], _this.from[1]);
          return _this.context.lineTo(_this.to[0], _this.to[1]);
        };
      })(this));
    };

    return Line;

  })(Shape);

  Circle = (function(_super) {
    __extends(Circle, _super);

    function Circle(canvas, center, radius) {
      this.center = center;
      this.radius = radius;
      this.draw = __bind(this.draw, this);
      Circle.__super__.constructor.call(this, canvas);
    }

    Circle.prototype.draw = function() {
      return this.drawShape((function(_this) {
        return function() {
          return _this.context.arc(_this.center[0], _this.center[1], _this.radius, 0, 2 * Math.PI, true);
        };
      })(this));
    };

    return Circle;

  })(Shape);

  Rectangle = (function(_super) {
    __extends(Rectangle, _super);

    function Rectangle(canvas, xy, wh) {
      this.xy = xy;
      this.wh = wh;
      this.draw = __bind(this.draw, this);
      Rectangle.__super__.constructor.call(this, canvas);
    }

    Rectangle.prototype.draw = function() {
      return this.drawShape((function(_this) {
        return function() {
          return _this.context.rect(_this.xy[0], _this.xy[1], _this.wh[0], _this.wh[1]);
        };
      })(this));
    };

    return Rectangle;

  })(Shape);

  roundRectangle = (function(_super) {
    __extends(roundRectangle, _super);

    function roundRectangle(canvas, x, y, width, height, radius) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.radius = radius;
      this.draw = __bind(this.draw, this);
      roundRectangle.__super__.constructor.call(this, canvas);
    }

    roundRectangle.prototype.draw = function() {
      return this.drawShape((function(_this) {
        return function() {
          _this.context.moveTo(_this.x + _this.radius, _this.y);
          _this.context.lineTo(_this.x + _this.width - _this.radius, _this.y);
          _this.context.quadraticCurveTo(_this.x + _this.width, _this.y, _this.x + _this.width, _this.y + _this.radius);
          _this.context.lineTo(_this.x + _this.width, _this.y + _this.height - _this.radius);
          _this.context.quadraticCurveTo(_this.x + _this.width, _this.y + _this.height, _this.x + _this.width - _this.radius, _this.y + _this.height);
          _this.context.lineTo(_this.x + _this.radius, _this.y + _this.height);
          _this.context.quadraticCurveTo(_this.x, _this.y + _this.height, _this.x, _this.y + _this.height - _this.radius);
          _this.context.lineTo(_this.x, _this.y + _this.radius);
          return _this.context.quadraticCurveTo(_this.x, _this.y, _this.x + _this.radius, _this.y);
        };
      })(this));
    };

    return roundRectangle;

  })(Shape);

  Square = (function(_super) {
    __extends(Square, _super);

    function Square() {
      this.draw = __bind(this.draw, this);
      return Square.__super__.constructor.apply(this, arguments);
    }

    Square.prototype.draw = function() {
      return this.drawShape((function(_this) {
        return function() {
          return _this.context.rect(_this.xy[0], _this.xy[1], _this.wh, _this.wh);
        };
      })(this));
    };

    return Square;

  })(Rectangle);

  Polygon = (function(_super) {
    __extends(Polygon, _super);

    function Polygon(canvas, points) {
      this.points = points;
      this.draw = __bind(this.draw, this);
      Polygon.__super__.constructor.call(this, canvas);
    }

    Polygon.prototype.draw = function() {
      return this.drawShape((function(_this) {
        return function() {
          var i, _results;
          i = 1;
          _this.context.moveTo(_this.points[0][0], _this.points[0][1]);
          _results = [];
          while (i < _this.points.length) {
            _this.context.lineTo(_this.points[i][0], _this.points[i][1]);
            _results.push(i++);
          }
          return _results;
        };
      })(this));
    };

    return Polygon;

  })(Shape);

  Curve = (function(_super) {
    __extends(Curve, _super);

    function Curve(canvas, startP, cp1, cp2, xy) {
      this.startP = startP;
      this.cp1 = cp1;
      this.cp2 = cp2;
      this.xy = xy;
      this.draw = __bind(this.draw, this);
      Curve.__super__.constructor.call(this, canvas);
    }

    Curve.prototype.draw = function() {
      return this.drawShape((function(_this) {
        return function() {
          _this.context.moveTo(_this.startP[0], _this.startP[1]);
          return _this.context.bezierCurveTo(_this.cp1[0], _this.cp1[1], _this.cp2[0], _this.cp2[1], _this.xy[0], _this.xy[1]);
        };
      })(this));
    };

    return Curve;

  })(Shape);

  $().ready(function() {
    var canvas, circle, curves, lines, polygon, rectCanvas, roundRectCanvas, trsCanvas;
    canvas = new Canvas('robot');
    new Polygon(canvas, [[150, 0], [50, 50], [250, 50]]).fill(Color.red).draw();
    new Rectangle(canvas, [50, 50], [200, 100]).fill(Color.white).draw();
    new Circle(canvas, [100, 75], 20).fill(Color.blue).draw();
    new Circle(canvas, [200, 75], 20).fill(Color.blue).draw();
    new Square(canvas, [137, 90], 25).fill(Color.green).draw();
    new Line(canvas, [150, 90], [150, 115]).draw();
    new Curve(canvas, [125, 125], [125, 150], [175, 150], [175, 125]).fill(Color.black).draw();
    rectCanvas = new Canvas('rectangle');
    new Rectangle(rectCanvas, [50, 0], [200, 100]).fill(Color.yellow).draw();
    roundRectCanvas = new Canvas('roundRect');
    new roundRectangle(roundRectCanvas, 100, 5, 100, 100, 20).fill(Color.aqua).draw();
    trsCanvas = new Canvas('trs');
    new Square(trsCanvas, [0, 0], 25).fill(Color.green).draw();
    new Square(trsCanvas, [0, 0], 25).translate([25, 25]).scale([2, 2]).fill(Color.green).draw();
    new Square(trsCanvas, [0, 0], 25).translate([75, 0]).scale([2, 2]).rotate(25).fill(Color.green).draw();
    lines = new Canvas('line');
    new Line(lines, [0, 0], [150, 115]).draw();
    new Line(lines, [150, 0], [150, 115]).stroke(Color.red).strokeWidth(10).draw();
    polygon = new Canvas('polygon');
    new Polygon(polygon, [[150, 0], [50, 50], [250, 50]]).fill(Color.green).draw();
    new Polygon(polygon, [[150, 50], [100, 75], [125, 125], [175, 125], [200, 75]]).fill(Color.red).draw();
    curves = new Canvas('curves');
    new Curve(curves, [125, 125], [125, 150], [175, 150], [175, 125]).fill(Color.black).draw();
    new Curve(curves, [0, 50], [50, 0], [100, 50], [100, 50]).draw();
    circle = new Canvas('circles');
    new Circle(circle, [50, 75], 50).fill(Color.blue).draw();
    return new Circle(circle, [200, 75], 10).fill(Color.blue).draw();
  });

}).call(this);
