// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var addAttribute, attribute, attributes, dom, index, inner_attributes, key, row, value, _i, _len, _ref, _ref1;
    attributes = {
      elem_layout: {
        position: 'absolute',
        background: '#222'
      },
      elem_border: {
        border: 'solid',
        'border-color': 'red'
      },
      numeric: {
        'border-width': 5,
        top: 85,
        right: 50,
        bottom: 'auto',
        left: 500,
        width: 300,
        height: 150,
        'line-height': 20,
        'font-size': 18
      },
      numeric_around: {
        margin: 'auto',
        padding: 5
      }
    };
    inner_attributes = {
      elem_layout: {
        display: 'inline'
      },
      text_shadow: {
        'text-shadow': '5px 5px red'
      },
      textual: {
        color: 'yellow',
        background: '#222',
        'font-weight': '',
        'font-style': 'italic',
        'text-decoration': '',
        'text-transform': 'capitalize',
        'text-align': 'center'
      }
    };
    dom = {
      theDiv: $("#content"),
      innerContent: $("[id=\"innercontent\"]"),
      controls: $('#left-control'),
      right_controls: $('#right-control')
    };
    _ref = attributes.numeric_around;
    for (attribute in _ref) {
      value = _ref[attribute];
      _ref1 = ['top', 'right', 'bottom', 'left'];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        key = _ref1[_i];
        attributes.numeric["" + attribute + "-" + key] = value;
      }
    }
    index = 0;
    row = null;
    addAttribute = function(key, value, controller, element, px) {
      var field, update;
      if (index % 2 === 0) {
        row = $('<div>').addClass('row').appendTo(controller);
      }
      index++;
      $('<label>').html("" + key + ": ").appendTo(row);
      field = $('<input>').attr({
        type: 'text'
      }).val(value).appendTo(row);
      update = (function(_this) {
        return function() {
          value = field.val();
          if ((px != null) && value !== 'auto') {
            value = "" + value + "px";
          }
          return element.css(key, value);
        };
      })(this);
      field.on("keydown", function(event) {
        if (event.which === 13) {
          return update();
        }
      });
      field.on("blur", update);
      return update();
    };
    $.each(attributes.elem_layout, function(key, value) {
      return addAttribute(key, value, dom.controls, dom.theDiv);
    });
    $.each(attributes.elem_border, function(key, value) {
      return addAttribute(key, value, dom.controls, dom.theDiv);
    });
    $.each(attributes.numeric, function(key, value) {
      return addAttribute(key, value, dom.controls, dom.theDiv, 'px');
    });
    index = 0;
    $.each(inner_attributes.elem_layout, function(key, value) {
      return addAttribute(key, value, dom.right_controls, dom.innerContent);
    });
    $.each(inner_attributes.textual, function(key, value) {
      return addAttribute(key, value, dom.right_controls, dom.innerContent);
    });
    return $.each(inner_attributes.text_shadow, function(key, value) {
      return addAttribute(key, value, dom.right_controls, dom.innerContent);
    });
  });


  /*
  coffee --compile --watch F:/ics315/315/playground/
  
  coffee -cw /Users/jan/parwinr/parvina.co.nf/parvina.co.nf/playground/
   */

}).call(this);
