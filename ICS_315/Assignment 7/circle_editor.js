// Generated by CoffeeScript 1.7.1

/*
Implements a primitive Web App editor for a circle.
Showcases using jQueryUI's menus and dialogs.
The File > Save... menu command writes the current circle attributes to a file.
The File > Open... menu command reads a previously stored circle attributes from a file and updates the circle accordingly.
The Edit > Change menu command displays a dialog where the user can define the circle's attributes:
  its center, radius, and colors inside and on the perimeter
Copyright 2014 Jan Stelovsky, MIT license (use as you wish, don't complain:)
 */

(function() {
  $(function() {
    var circle, circleArray, dialogOptions, dom, id, ids, jsonCopy, options, selectedCircle, toolTipOptions, topMenus, _i, _len;
    ids = ['menubar', 'file_menu', 'open', 'save', 'edit_menu', 'change', 'create', 'copy', 'cut', 'paste', 'canvas', 'dialog', 'dialog2', 'x', 'y', 'radius', 'color', 'stroke'];
    dom = {};
    circleArray = [];
    jsonCopy = 0;
    selectedCircle = 0;
    for (_i = 0, _len = ids.length; _i < _len; _i++) {
      id = ids[_i];
      dom[id] = $("#" + id);
    }
    options = {
      focus: function(event, ui) {
        var isTopMenu, position;
        isTopMenu = dom.menubar[0] === ui.item.parent()[0];
        position = {
          my: 'left top',
          at: isTopMenu ? 'left bottom' : 'right top'
        };
        return dom.menubar.menu('option', 'position', position);
      }
    };
    dom.menubar.menu(options);
    topMenus = $('#menubar > li');
    dom.menubar.width(topMenus.length * topMenus.width());
    $('#menubar span').addClass('ui-icon');
    if (!JS.File.canRead()) {
      dom.open.attr({
        title: "Your browser can't read files, sorry..."
      }).parent().addClass('ui-state-disabled');
    }
    if (!JS.File.canWrite()) {
      dom.save.attr({
        title: "Your browser can't write files, sorry..."
      }).parent().addClass('ui-state-disabled');
    }
    circle = new JS.Circle(dom.canvas);
    circleArray.push(circle);
    circleArray[0].draw();
    dialogOptions = {
      modal: true,
      autoOpen: false
    };
    dom.dialog.dialog(dialogOptions);
    dom.dialog2.dialog(dialogOptions);
    dom.open.click(function() {
      var onRead;
      onRead = function(json) {
        return circleArray[0].set(JSON.parse(json));
      };
      JS.File.read(onRead);
      return dom.menubar.blur();
    });
    dom.save.click(function() {
      var arrayLength, i, json;
      arrayLength = circleArray.length;
      i = 0;
      while (i < arrayLength) {
        json = JSON.stringify(circleArray[0].get());
        JS.File.write('circle.json', json);
        i++;
      }
      return dom.menubar.blur();
    });
    dom.change.click(function() {
      var buttons, key, value, _ref;
      dom.menubar.blur();
      _ref = circleArray[selectedCircle].get();
      for (key in _ref) {
        value = _ref[key];
        dom[key].val(value);
      }
      buttons = {
        Change: function() {
          var i, specs, _j, _len1, _ref1;
          specs = {};
          _ref1 = ['x', 'y', 'radius', 'color', 'stroke'];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            key = _ref1[_j];
            specs[key] = dom[key].val();
          }
          circleArray[selectedCircle].set(specs);
          i = 0;
          while (i < circleArray.length) {
            if (i === selectedCircle) {

            } else {
              circleArray[i].reDraw();
            }
            i++;
          }
          return dom.dialog.dialog('close');
        },
        Cancel: function() {
          return dom.dialog.dialog('close');
        }
      };
      dom.dialog.dialog('option', 'buttons', buttons);
      return dom.dialog.dialog('open');
    });
    dom.create.click(function() {
      var buttons, key, value, _ref;
      dom.menubar.blur();
      _ref = circle.get();
      for (key in _ref) {
        value = _ref[key];
        dom[key].val(value);
      }
      buttons = {
        Create: function() {
          var i, specs, _j, _len1, _ref1;
          specs = {};
          _ref1 = ['x', 'y', 'radius', 'color', 'stroke'];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            key = _ref1[_j];
            specs[key] = dom[key].val();
          }
          circleArray.push(new JS.Circle(dom.canvas));
          circle.clear();
          selectedCircle = circleArray.length - 1;
          i = 0;
          while (i < circleArray.length) {
            if (i === selectedCircle) {
              circleArray[circleArray.length - 1].paste(specs);
            } else {
              circleArray[i].reDraw();
            }
            i++;
          }
          alert("Selected newly created Circle # " + selectedCircle);
          return dom.dialog.dialog('close');
        },
        Cancel: function() {
          return dom.dialog.dialog('close');
        }
      };
      dom.dialog.dialog('option', 'buttons', buttons);
      return dom.dialog.dialog('open');
    });
    dom.copy.click(function() {
      return jsonCopy = JSON.stringify(circleArray[selectedCircle].get());
    });
    dom.cut.click(function() {
      var arrayLength, i, _results;
      jsonCopy = JSON.stringify(circleArray[selectedCircle].get());
      circleArray.splice(selectedCircle, 1);
      circle.clear();
      arrayLength = circleArray.length;
      i = 0;
      _results = [];
      while (i < arrayLength) {
        circleArray[i].reDraw();
        _results.push(i++);
      }
      return _results;
    });
    dom.paste.click(function() {
      circleArray.push(new JS.Circle(dom.canvas));
      circleArray[circleArray.length - 1].paste(JSON.parse(jsonCopy));
      selectedCircle = circleArray.length - 1;
      return alert("Selected newly created Circle # " + selectedCircle);
    });
    $("#canvas").click(function(e) {
      var clickedX, clickedY, i;
      clickedX = e.pageX - this.offsetLeft;
      clickedY = e.pageY - this.offsetTop;
      alert(clickedX);
      alert(clickedY);
      i = 0;
      while (i < circleArray.length) {
        if (clickedX < circleArray[i].getRight() && clickedX > circleArray[i].getLeft() && clickedY > circleArray[i].getTop() && clickedY < circleArray[i].getBottom()) {
          selectedCircle = i;
        }
        i++;
        alert("Clicked Circle Number " + selectedCircle);
      }
    });
    toolTipOptions = {
      position: {
        my: 'left top',
        at: 'right+10 top'
      },
      tooltipClass: 'tooltip'
    };
    return $(document).tooltip(toolTipOptions);
  });


  /*
  coffee -cw /Users/jan/parwinr/parvina.co.nf/parvina.co.nf/playground/
   */

}).call(this);
