% library(win_menu) compiled into win_menu 0.00 sec, 29 clauses
% c:/Users/JohnBen/Desktop/rasayj8.pro compiled 0.02 sec, 273 clauses
Welcome to SWI-Prolog (Multi-threaded, 32 bits, Version 6.2.2)
Copyright (c) 1990-2012 University of Amsterdam, VU Amsterdam
SWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software,
and you are welcome to redistribute it under certain conditions.
Please visit http://www.swi-prolog.org for details.

For help, use ?- help(Topic). or ?- apropos(Word).

1 ?- newLanguage(fortranI).
true.

2 ?- languageType(fortranI, X).
X = imperative.

3 ?- ancestor(X, fortranI).
false.

4 ?- descendant(X, fortranI).
X = fortranII ;
X = fortranIV ;
X = algol60 ;
X = fortran77 ;
X = basic ;
X = pli ;
X = fortran90 ;
X = hpf ;
X = fortran95 ;
X = fortran95 ;
X = fortran2003 ;
X = fortran2008 ;
X = fortran2003 ;
X = fortran2008 ;
X = visualBasic ;
X = vbScript ;
X = algolW ;
X = pli ;
X = algol68 ;
X = simula ;
X = pascal ;
X = modula2 ;
X = euclid ;
X = ada ;
X = clu ;
X = ml ;
X = oberon ;
X = modula3 ;
X = mesa ;
X = cedar ;
X = ada95 ;
X = cpp ;
X = ada2005 ;
X = java ;
X = cSharp ;
X = java5 ;
X = cSharp ;
X = java6 ;
X = miranda ;
X = caml ;
X = haskell ;
X = oCaml ;
X = fSharp ;
X = c ;
X = c90 ;
X = cpp ;
X = perl ;
X = objectiveC ;
X = c99 ;
X = java ;
X = cSharp ;
X = java5 ;
X = cSharp ;
X = java6 ;
X = php ;
X = simula67 ;
X = smalltalk80 ;
X = modula2 ;
X = euclid ;
X = ada ;
X = clu ;
X = cpp ;
X = eiffel ;
X = clos ;
X = java ;
X = cSharp ;
X = java5 ;
X = cSharp ;
X = java6 ;
X = ruby ;
X = oberon ;
X = modula3 ;
X = mesa ;
X = cedar ;
X = ada95 ;
X = cpp ;
X = ada2005 ;
X = java ;
X = cSharp ;
X = java5 ;
X = cSharp ;
X = java6 ;
false.

5 ?- family(X, fortranI).
false.

6 ?- newLanguage(ada).
false.

7 ?- programmingLanguage(ada).
true.

8 ?- ancestor(X, ada).
X = pascal ;
X = simula67 ;
X = fortranI ;
X = fortranI ;
X = fortranII ;
X = fortranII ;
X = algol58 ;
X = algol58 ;
X = algol60 ;
X = algol60 ;
X = algolW ;
X = simula ;
false.

9 ?- descendant(ada, X).
X = pascal ;
X = simula67 ;
X = fortranI ;
X = fortranI ;
X = fortranII ;
X = fortranII ;
X = algol58 ;
X = algol58 ;
X = algol60 ;
X = algol60 ;
X = algolW ;
X = simula ;
false.

10 ?- descendant(X, ada).
X = ada95 ;
X = cpp ;
X = ada2005 ;
X = java ;
X = cSharp ;
X = java5 ;
X = cSharp ;
X = java6 ;
false.

11 ?- languageType(ada, X).
X = objectOriented.

12 ?- family(ada, X).
X = modula2 ;
X = euclid ;
X = clu ;
X = ml ;
X = smalltalk80 ;
X = modula2 ;
X = euclid ;
X = clu ;
false.

13 ?- programmingLanguage(foo).
false.

14 ?- languageType(X, functional).
X = caml ;
X = commonLisp ;
X = haskell ;
X = lisp ;
X = miranda ;
X = ml ;
X = scheme ;
X = erlang ;
X = logo ;
X = sisal.

15 ?- languageType(X, imperative).
X = algol58 ;
X = algol60 ;
X = algolW ;
X = algol68 ;
X = basic ;
X = bcpl ;
X = cedar ;
X = clu ;
X = c ;
X = c90 ;
X = c99 ;
X = cobol ;
X = euclid ;
X = fortranI ;
X = fortranII ;
X = fortranIV ;
X = fortran77 ;
X = fortran90 ;
X = fortran95 ;
X = fortran2003 ;
X = fortran2008 ;
X = hpf ;
X = mesa ;
X = modula2 ;
X = pascal ;
X = pli ;
X = visualBasic.

16 ?- family(algolW, X).
X = pli ;
X = algol68 ;
X = simula ;
false.

17 ?- descendant(algol60, X).
X = fortranII ;
X = algol58 ;
X = fortranI ;
false.

18 ?- anscestor(algol60, basic).
Correct to: "ancestor(algol60,basic)"? yes
false.